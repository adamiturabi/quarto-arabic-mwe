[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Minimum(ish) Working Example of Quarto with Arabic RTL text in an LTR document",
    "section": "",
    "text": "Example\n\nwatermark\n\n\n\n\n\n\nPreface\nبسم الله الرحمن الرحيم\nQuarto is a document publishing software. With it, you can write your document in Pandoc flavored markdown. Quarto will use Pandoc under the hood, and do a bunch of other fancy stuff, to output your markdown document in formats of your choice, like HTML for websites, and PDF (via Latex).\nSo far so good. But many of my documents are in English with Arabic content interspersed. Arabic is written right-to-left (RTL) whereas English is written left-to-right (LTR). The support of bidirectional (BiDi) text is a notoriously tricky problem. The cursive property of the Arabic script (with joining letters) compounds the issue.\nIn this write-up, I will describe how to configure Quarto to achieve this.\n\nThe code for this book can be used as a template for RTL document projects. Along with BiDi, I’ll also discuss other aspects like fonts, figures, etc. إن شاء الله.\nThe source code for this book can be found here: https://github.com/adamiturabi/quarto-arabic-mwe.\nThe rendered output is published here: https://adamiturabi.github.io/quarto-arabic-mwe.\nA PDF version of this document can be downloaded if you click on the PDF icon next to the title at the top left of this page.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "srcqmd/intro.html",
    "href": "srcqmd/intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "Example\n\nwatermark\n\n\n\n\n\nIn order to create a Quarto book project (like this one), use this command:\nquarto create project book mybook\nIt will create a bunch of files that will be needed for the book.\nThis procedure is described in detail here: https://quarto.org/docs/books/.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "srcqmd/arabic_support.html",
    "href": "srcqmd/arabic_support.html",
    "title": "2  Arabic (العربية) support",
    "section": "",
    "text": "2.1 In-line Arabic: spans\nThere are two main ways to insert RTL Arabic text in an LTR document:\nFor inline Arabic, we will use a Pandoc span. A span is written using this syntax:\nWithin square brackets [] is the content of the span. This is what will be rendered in the output. Within the curly braces {} is a class name and some attributes that are needed by Quarto to properly process the span.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Arabic ([العربية]{.ar}) support</span>"
    ]
  },
  {
    "objectID": "srcqmd/arabic_support.html#in-line-arabic-spans",
    "href": "srcqmd/arabic_support.html#in-line-arabic-spans",
    "title": "2  Arabic (العربية) support",
    "section": "",
    "text": "[This is the span's *content text*]{.classname attributekey=\"attributeval\"}\n\n\n2.1.1 Arabic spans for HTML output\nIn order to render the Arabic content text correctly for HTML output, the span is input thus in the .qmd source file.\n[هذا نص عربي.]{.reg-ar-txt dir=\"rtl\" lang=\"ar\"}\n(Note that the following code listing does not render correctly in the PDF output, exemplifying how tricky BiDi support is. We haven’t attempted to find a workaround for this.)\nThe class name is arbitrary. We suggest using a descriptive name. We will be using it in the CSS for selecting the font later. The output HTML code will be something like:\n&lt;span class=\"reg-ar-txt\" dir=\"rtl\" lang=\"ar\"&gt;هذا نص عربي.&lt;/span&gt;\n\n\n2.1.2 Arabic spans for PDF output\nFor PDF output, the dir=\"rtl\" attribute is unneeded, and in fact, clashes with the Xelatex PDF engine that Quarto mandates we use for documents with RTL text. So the span will need to be input thus in the .qmd source file:\n[هذا نص عربي.]{.reg-ar-txt lang=\"ar\"}\nThe output Latex code will be something like:\n\\foreignlanguage{arabic}{هذا نص عربي.}\nUnder the hood, \\foreignlanguage is a command that is used by the Latex package babel that Pandoc specifies in its Latex template for handling multiple languages and their scripts.\n\n\n2.1.3 Rendered output of Arabic span\nFinally, this is an example of an English sentence with inline Arabic text نَصٌّ عَرَبِيٌّ. within it. Locate this sentence in the source code file here to see how we wrote it.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Arabic ([العربية]{.ar}) support</span>"
    ]
  },
  {
    "objectID": "srcqmd/arabic_support.html#arabic-block-text-divs",
    "href": "srcqmd/arabic_support.html#arabic-block-text-divs",
    "title": "2  Arabic (العربية) support",
    "section": "2.2 Arabic block text: divs",
    "text": "2.2 Arabic block text: divs\nIn order to write a block (paragraph) of Arabic text within an LTR document we will use a Pandoc div. A div is written using this syntax:\n:::{.classname attributekey=\"attributeval\"}\nThis is the divs's *content text*.\n:::\n\n2.2.1 Arabic divs for HTML output\nFor HTML output, a div is input thus in the .qmd source:\n:::{.reg-ar-txt dir=\"rtl\" lang=\"ar\"}\nهذا كلام عربي طويل. أريد أن أكتب حتى يبلغ النص سطرين. \nأستعمل برنامج قوارطو لإنتاج الملف الخارجي. \nهو برنامج جيد قد خلف البرنامج بكداؤن الذي كنت أستعمله من قبل.\n:::\nThe class name reg-ar-txt is, again, arbitrary. The output HTML code will be:\n&lt;div class=\"reg-ar-text\" lang=\"ar\" dir=\"rtl\"&gt;\nهذا كلام عربي طويل.\nأريد أن أكتب حتى يبلغ النص سطرين.\nأستعمل برنامج قوارطو لإنتاج الملف الخارجي.\nهو برنامج جيد قد خلف البرنامج بكداؤن الذي كنت أستعمله من قبل.\n&lt;/div&gt;\n\n\n2.2.2 Arabic divs for PDF output\nFor PDF output, a div is input thus in the .qmd source:\n:::{.otherlanguage data-latex=\"{arabic}\" lang='ar'}\nهذا كلام عربي طويل.\nأريد أن أكتب حتى يبلغ النص سطرين.\nأستعمل برنامج قوارطو لإنتاج الملف الخارجي.\nهو برنامج جيد قد خلف البرنامج بكداؤن الذي كنت أستعمله من قبل.\n:::\nIn this case, the class name otherlanguage is not arbitrary. Furthermore, another attribute data-latex=\"{arabic}\" is also needed. And, as with spans, lang=\"ar\" is needed but dir=\"rtl\" should not be used. The output Latex code is:\n\\begin{otherlanguage}{arabic}\n\nهذا كلام عربي طويل.\nأريد أن أكتب حتى يبلغ النص سطرين.\nأستعمل برنامج قوارطو لإنتاج الملف الخارجي.\nهو برنامج جيد قد خلف البرنامج بكداؤن الذي كنت أستعمله من قبل.\n\n\\end{otherlanguage}\n\n\n2.2.3 Rendered output of Arabic div\nFinally, this is an example of an Arabic div. Locate it in the source code file here to see how we wrote it.\n\nهذا كلام عربي طويل. أريد أن أكتب حتى يبلغ النص سطرين. أستعمل برنامج قوارطو لإنتاج الملف الخارجي. هو برنامج جيد قد خلف البرنامج بكداؤن الذي كنت أستعمله من قبل.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Arabic ([العربية]{.ar}) support</span>"
    ]
  },
  {
    "objectID": "srcqmd/arabic_support.html#pandoc-lua-fiters",
    "href": "srcqmd/arabic_support.html#pandoc-lua-fiters",
    "title": "2  Arabic (العربية) support",
    "section": "2.3 Pandoc Lua fiters",
    "text": "2.3 Pandoc Lua fiters\nAs you can see, the process for typing Arabic text is both lengthy, and different for HTML and PDF outputs. In order to simplify it, we can use Pandoc Lua filters.\nWe have created a Quarto filter extension (which is a grouping of Lua filters) to support Arabic divs and spans. The process for creating a Quarto filter extension is detailed here: https://quarto.org/docs/extensions/filters.html\nThis is the filter inline-arabic-span.lua that we wrote for handling Arabic spans:\n-- Add attributes for Arabic text in a span\nfunction Span (el)\n  if el.classes:includes 'ar' or el.classes:includes 'aralt' then\n    text = pandoc.utils.stringify(el)\n    contents = {pandoc.Str(text)}\n    if FORMAT:match 'latex' then\n      -- for handling alternate Arabic font\n      if el.classes:includes 'aralt' then\n        -- can't seem to use string concatenate directly. Have to use RawInline\n        table.insert(\n          contents, 1,\n          pandoc.RawInline('latex', '\\\\altfamily ')\n        )\n      end\n      -- No dir needed for babel and throws error if it sees dir attribute. \n      -- It was previously needed for polyglossia\n      return pandoc.Span(contents, {lang='ar'})\n    elseif FORMAT:match 'html' then\n      classval = 'reg-ar-text'\n      if el.classes:includes 'aralt' then\n        classval = 'alt-ar-text'\n      end\n      -- dir needed for html otherwise punctuation gets messed up\n      return pandoc.Span(contents, {class=classval, lang='ar', dir='rtl'})\n    end\n  end\nend\nThis is the filter arabic-div.lua that we wrote for handling Arabic divs:\n-- Add attributes for Arabic text in a div\nfunction Div (el)\n  if el.classes:includes 'ar' or el.classes:includes 'aralt' then\n    text = pandoc.utils.stringify(el)\n    contents = {pandoc.Str(text)}\n    if FORMAT:match 'latex' then\n      -- for handling alternate Arabic font\n      if el.classes:includes 'aralt' then\n        -- can't seem to use string concatenate directly. Have to use RawInline\n        table.insert(\n          contents, 1,\n          pandoc.RawInline('latex', '\\\\altfamily ')\n        )\n      end\n      -- No dir needed for babel and throws error if it sees dir attribute. \n      -- It was previously needed for polyglossia\n      return pandoc.Div(\n        contents, \n        {class='otherlanguage', data_latex=\"{arabic}\", lang='ar'}\n      )\n    elseif FORMAT:match 'html' then\n      classval = 'reg-ar-text'\n      if el.classes:includes 'aralt' then\n        classval = 'alt-ar-text'\n      end\n      -- dir needed for html otherwise punctuation gets messed up\n      return pandoc.Div(\n        contents, \n        {class=classval, lang='ar', dir='rtl'}\n      )\n    end\n  end\nend\nWith activating these filters, now you can use Arabic divs and spans using a simplified syntax.\nInput for an Arabic span:\n[هذا نص عربي.]{.ar}\nInput for an Arabic div:\n:::{.ar}\nهذا كلام عربي طويل.\nأريد أن أكتب حتى يبلغ النص سطرين.\nأستعمل برنامج قوارطو لإنتاج الملف الخارجي.\nهو برنامج جيد قد خلف البرنامج بكداؤن الذي كنت أستعمله من قبل.\n:::\nThe filters will process them correctly for HTML and PDF output. Note that the class name reg-ar-text is hardcoded in the filter. If you wish to modify it you can edit the Lua files directly.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Arabic ([العربية]{.ar}) support</span>"
    ]
  },
  {
    "objectID": "srcqmd/arabic_support.html#arabic-fonts",
    "href": "srcqmd/arabic_support.html#arabic-fonts",
    "title": "2  Arabic (العربية) support",
    "section": "2.4 Arabic fonts",
    "text": "2.4 Arabic fonts\nYou can use a specific font for the Arabic text which is different from the font used for the English text. This is usually desirable because the typeface design for the Latin font often does not optimize (or even sometimes support) an Arabic font.\nFor my project, I am using the Vazirmatn and Amiri fonts.\nBoth of these are well designed fonts. For me, a major consideration is good typesetting of diacritics and the hamza character (ء). (See here for what I’m talking about: https://adamiturabi.github.io/hamza-rules/#typographical-limitations)\nTo specify the Arabic fonts, the process is different for HTML vs PDF output. We’ll describe both below:\n\n2.4.1 Specify Arabic font for HTML\nFor HTML output, the Arabic font is specified in the CSS file. The class name that we selected previously reg-ar-text is now assigned a font:\n.reg-ar-text {\n  font-family: Vazirmatn, serif;\n  /* scaled up slightly w.r.t. the Latin font for readability */\n  font-size: 1.2em; \n  /* line spacing not scaled for visual congruence at the expense of clashes */\n  line-height: 100%;\n}\nYou will also need to add the font files to your project. Quarto will copy them over to the output directory so that they can be served to the browsers of visitors viewing your site. Be aware of fonts licences before uploading and using fonts in this way. Instead of uploading font files, you can instead use a font delivery service like Google Fonts, although they often have outdated versions. See my fonts directory.\nThe font names Vazirmatn and AmiriWeb are defined in the same CSS file. A relative path to the font files is needed in the CSS file. See our CSS file for details.\nIn our CSS file, we have specified the font Amiri is specified as an alternate font:\n.alt-ar-text {\n  font-family: AmiriWeb, serif;\n  font-size: 1.2em;\n}\nIt can be specified in the .qmd source with {.aralt} instead of {.ar}. You can also see how we handle it in the source code for the Lua filters above.\nHere is an example of a div and a span in the alternate Arabic font. Span: هذا نص عربي.\nDiv:\n\nهذا كلام عربي طويل. أريد أن أكتب حتى يبلغ النص سطرين. أستعمل برنامج قوارطو لإنتاج الملف الخارجي. هو برنامج جيد قد خلف البرنامج بكداؤن الذي كنت أستعمله من قبل.\n\nBy the way, I am not, by any means, an expert (or even proficient) in CSS, so if you see any problems with this method of specifying the font, feel free to let me know in the discussions or issues of the Github page for this book.\n\n\n2.4.2 Specify Arabic font for PDF\nAs we mentioned earlier, Latex uses the babel package to handle multiple languages. In order to specify Arabic font(s), we need to add the following lines in the intermediate .tex file produced by Quarto:\n\\babelfont[arabic]{rm}[Language=Default]{Vazirmatn-Light}\n\\babelfont[arabic]{sf}[Language=Default]{Vazirmatn-Light}\n\\babelfont[arabic]{alt}[Language=Default]{Amiri}\nQuarto provides hooks for inserting such additional code using includes and templates.\nThe above lines of code need to be inserted at a specific point after the usepackage{babel} line. We found that replacing the partial template for before-title.tex worked in this case. Here is the addition in\nour _quarto.yml file:\nformat:\n  pdf:\n    template-partials:\n      - srctex/before-title.tex\nAgain, see our source code in Github for more details.\nBy the way, the fonts will need to have been installed on your system in order to generate the PDF output.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Arabic ([العربية]{.ar}) support</span>"
    ]
  },
  {
    "objectID": "srcqmd/transliteration.html",
    "href": "srcqmd/transliteration.html",
    "title": "3  Transliteration of Arabic",
    "section": "",
    "text": "3.1 Romanization scheme\nIn my work, I frequently need to transliterate and transcribe Arabic text in Latin characters. There are various Romanization schemes in existence, using dots, macrons, etc. The Romanization scheme I am using for my work is tabulated below:\nAs you can see, I use digraphs d͡h, g͡h, etc. for some letters. This is because for my current work, I value readability over precision.\nIt is possible to input these special characters directly by modifying your keyboard layout or mapping, either at a operating system, or editor level. Andreas Hallberg has described a technique for inputing them in the vim editor here: https://andreasmhallberg.github.io/ergonomic-arabic-transcription/\nFor Quarto, I prefer to input the transliterated text as ASCII characters and write a Lua filter transliteration-span.lua to handle rendering them correctly. The ASCII to transliterated output mapping is shown in the table above. So if I type:\nIt will be output as d͡hahabtu mad͡h·haban.\nNote the dot character · is automatically inserted by the filter between the digraph d͡h and the following h for helping in disambiguation.\nWith {.trn} the output is in italic (as above). But sometimes I need to have non-italic output, as in the case of names. For that I use {.trn2}. For example:\nThis is rendered as:\nƐāʾis͡hah and ʾĀdam are studying the Qurʾān and Ḥadīt͡h.\nNote how the hash character # is used to control capitalization.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Transliteration of Arabic</span>"
    ]
  },
  {
    "objectID": "srcqmd/transliteration.html#romanization-scheme",
    "href": "srcqmd/transliteration.html#romanization-scheme",
    "title": "3  Transliteration of Arabic",
    "section": "",
    "text": "Arabic letter\nTransliterated output\nASCII input\n\n\n\n\nء\nʾ\nE\n\n\nا\nā\nA\n\n\nب\nb\nb\n\n\nت\nt\nt\n\n\nث\nt͡h\nv\n\n\nج\nj\nj\n\n\nح\nḥ\nH\n\n\nخ\nk͡h\nx\n\n\nد\nd\nd\n\n\nذ\nd͡h\np\n\n\nر\nr\nr\n\n\nز\nz\nz\n\n\nس\ns\ns\n\n\nش\ns͡h\nc\n\n\nص\nṣ\nS\n\n\nض\nḍ\nD\n\n\nط\nṭ\nT\n\n\nظ\nḍ͡h\nP\n\n\nع\nɛ\ne\n\n\nغ\ng͡h\ng\n\n\nف\nf\nf\n\n\nق\nq\nq\n\n\nك\nk\nk\n\n\nل\nl\nl\n\n\nم\nm\nm\n\n\nن\nn\nn\n\n\nه\nh\nh\n\n\nو (C)\nw\nw\n\n\nي (C)\ny\ny\n\n\nو (V)\nū\nU\n\n\nي (V)\nī\nI\n\n\n\n\n\n\n[pahabtu maphaban]{.trn}\n\n\n\n[#eAEicah]{.trn2} and [E#Adam]{.trn2} are studying \nthe [#qurEAn]{.trn2} and [#HadIv]{.trn2}.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Transliteration of Arabic</span>"
    ]
  },
  {
    "objectID": "srcqmd/transliteration.html#fonts",
    "href": "srcqmd/transliteration.html#fonts",
    "title": "3  Transliteration of Arabic",
    "section": "3.2 Fonts",
    "text": "3.2 Fonts\nFor the Latin font used in your main text, you will need to pick a font that supports the dots, macrons, breves, etc needed for transliteration. I am using the Charis SIL font.\nOther fonts I have experimented with are:\n\nNew Computer Modern\nDejaVu Serif\nJunicode\nBrill\nGentium Plus\nSTIX Two Text",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Transliteration of Arabic</span>"
    ]
  },
  {
    "objectID": "srcqmd/summary.html",
    "href": "srcqmd/summary.html",
    "title": "4  Summary",
    "section": "",
    "text": "Example\n\nwatermark\n\n\n\n\n\nDummy text to test references:\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "srcqmd/references.html",
    "href": "srcqmd/references.html",
    "title": "References",
    "section": "",
    "text": "Example\n\nwatermark\n\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  }
]